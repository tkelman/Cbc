# Select optimization (-O or -g). -O will be automatically bumped up to the 
# highest level of optimization the compiler supports. If want something in
# between then specify the exact level you want, e.g., -O1 or -O2
OptLevel := -g
LibType := SHARED

##############################################################################
# You should not need to edit below this line unless you are configuring cbc
# for multiple solvers, or for a single solver other than clp.
##############################################################################

# Bring on the boilerplate, yet again.

MakefileDir := ../../Makefiles
include ${MakefileDir}/Makefile.coin

# cbc will build without OsiCbc, but you can't run the miplib test suite
# without it. Disabling OsiCbc in Makefile.location simply excludes OsiCbc from
# the link. In the current COIN makefile architecture, building Cbc and Osi
# leads inevitably to building OsiCbc.

ifneq ($(filter COIN_libOsiCbc,$(CoinLibsDefined)),)
  CXXFLAGS += -DCBC_USE_CBC
  CBC_SOLVERS += Cbc
else
  $(warning OsiCbc not enabled in CoinLibsDefined. You will not be able to)
  $(warning run the `cbc -miplib' command. Edit Makefile.location to enable)
  $(warning OsiCbc.)
endif

# Include files, library directory and name, compile-time defines.  Start out
# by adding libCbc.

IncDir := $(CbcIncDir)
LibDir := $(CbcLibDir)
LibName := $(CbcLibName)
Define := $(CBC_DEFINES) $(CbcDefine)

# Add the requested libOsiXXX libraries.

IncDir += $(foreach solver,$(CBC_SOLVERS),$(Osi$(solver)IncDir))
LibDir += $(foreach solver,$(CBC_SOLVERS),$(Osi$(solver)LibDir))
LibName += $(foreach solver,$(CBC_SOLVERS),$(Osi$(solver)LibName))
Define += $(foreach solver,$(CBC_SOLVERS),$(Osi$(solver)Define))

# Add the requested libXXX libraries (excepting libCbc, which is already in).

CBC_SOLVERS := $(filter-out Cbc,$(CBC_SOLVERS))
IncDir += $(foreach solver,$(CBC_SOLVERS),$($(solver)IncDir))
LibDir += $(foreach solver,$(CBC_SOLVERS),$($(solver)LibDir))
LibName += $(foreach solver,$(CBC_SOLVERS),$($(solver)LibName))
Define += $(foreach lib,$(CBC_SOLVERS),$($(lib)Define))

# If Clp is in the mix, and Vol is available, we need to bring libVol
# into the mix. (Only the library is required.)

ifneq ($(filter Clp,$(CBC_SOLVERS)),)
  ifneq ($(filter COIN_libVol,$(CoinLibsDefined)),)
    LibDir += $(VolLibDir)
    LibName += $(VolLibName)
  endif
endif

# Add the required base libraries: Cgl, Osi, and Coin.

IncDir += $(foreach lib,Cgl Osi Coin,$($(lib)IncDir))
LibDir += $(foreach lib,Cgl Osi Coin,$($(lib)LibDir))
LibName += $(foreach lib,Cgl Osi Coin,$($(lib)LibName))
Define += $(foreach lib,Cgl Osi Coin,$($(lib)Define))

# And a few other potentially useful libraries: z, bz, readline. Unfortunately
# the naming conventions are irregular.

utilLibs := $(filter \
    $(patsubst COIN_%,%,$(CoinLibsDefined)),libz libbz readline)
utilLibs := $(patsubst lib%z,%zlib,$(utilLibs))

IncDir += $(foreach lib,$(utilLibs),$($(lib)IncDir))
LibDir += $(foreach lib,$(utilLibs),$($(lib)LibDir))
LibName += $(foreach lib,$(utilLibs),$($(lib)LibName))
Define += $(foreach lib,$(utilLibs),$($(lib)Define))

# Strip redundancy from IncDir, LibDir. Reordering should not be harmful for
# these, under normal circumstances.

IncDir := ./include $(sort $(IncDir))
LibDir := $(sort $(LibDir))

# Uncomment these to see what's been ordered for the build.

# $(info IncDir is $(IncDir))
# $(info LibDir is $(LibDir))
# $(info LibName is $(LibName))
# $(info Define is $(Define))

##############################################################################
# You should not need to edit below this line.
##############################################################################

CXXFLAGS += $(OPTFLAG)
ifeq ($(OptLevel),-g)
    CXXFLAGS += -DCBC_DEBUG
endif

TESTSRC := CbcMain.cpp
TESTSRC += CbcParam.cpp
TESTSRC += unitTest.cpp

###############################################################################

space:= $(empty) $(empty)
OptVersion := $(subst $(space),_,$(OptLevel))

TARGETDIR := $(UNAME)$(OptVersion)
DEPDIR := dep

VPATH := . : include : Junk : ${TARGETDIR} : ${DEPDIR}

#########################################################################

CXXFLAGS += $(addprefix -I,${IncDir})
CXXFLAGS += $(addprefix -D,${Define})

LIBDIRS := ${LibDir}
LIBS    := ${LibName}

LDFLAGS := $(addprefix -L,$(LIBDIRS))
LDFLAGS += $(call ifprefix,$(SHLINKPREFIX),$(LIBDIRS))
LDFLAGS += $(patsubst lib%,-l%,$(basename $(LIBS)))

ifeq ($(findstring Linux,${UNAME}),Linux)
	CXXFLAGS +=	-DREADLINE
endif
#LDFLAGS += -lefence

###############################################################################

TESTOBJ := $(addprefix $(TARGETDIR)/, $(TESTSRC:.cpp=.o))
TESTDEP := $(addprefix $(DEPDIR)/, $(TESTSRC:.cpp=.d))

###############################################################################
# This one must be right before the rules

include ${MakefileDir}/Makefile.rules

###############################################################################

.DELETE_ON_ERROR:

.PHONY: cbc unitTest

cbc unitTest: $(TARGETDIR)/cbc

$(TARGETDIR)/cbc : $(TESTOBJ)
	@rm -rf Junk
	@echo ""
	@echo Creating cbc
	@mkdir -p $(TARGETDIR)
	@rm -f $@
	$(CXX) $(CXXFLAGS) -o $@ $(TESTOBJ) $(LDFLAGS) $(SYSLD) -lm
	${CP} $@ ..

###############################################################################

%::
	@mkdir -p Junk
	touch Junk/$(notdir $@)

###############################################################################

-include $(TESTDEP)

# Select optimization (-O or -g). -O will be automatically bumped up to the 
# highest level of optimization the compiler supports. If want something in
# between then specify the exact level you want, e.g., -O1 or -O2
OptLevel := -g

##############################################################################
# You should not need to edit below this line unless you are configuring cbc
# for multiple solvers, or for a single solver other than clp.
##############################################################################

# The location of the customized Makefiles
# also inherited from the parent Makefile

include ${MakefileDir}/Makefile.coin
include ${MakefileDir}/Makefile.location

# Include files, library directory and name, compile-time defines.

# The pattern is (hopefully) obvious. Add or uncomment the appropriate lines
# for your favourite solver. The appropriate lines of code must be installed in
# the conditional compilation blocks in CbcMain.cpp in order for any of this to
# work. One conditional compilation block is at the head of the file and
# selects #include headers. The second is at the start of main() and creates a
# vector of available solvers.

IncDir := ${CbcIncDir} ${CglIncDir}
IncDir += ${OsiClpIncDir} ${ClpIncDir}
#IncDir += ${OsiDylpIncDir} ${DylpIncDir}
IncDir += ${OsiIncDir} ${CoinIncDir}
IncDir += ${bzlibIncDir} ${zlibIncDir} $(lapackIncDir)
IncDir += ./include

LibDir := ${CbcLibDir} ${CglLibDir}
LibDir += ${OsiClpLibDir} ${ClpLibDir}
#LibDir += ${OsiDylpLibDir} ${DylpLibDir}
LibDir += ${OsiLibDir} ${CoinLibDir}
LibDir += ${bzlibLibDir} ${zlibLibDir} $(lapackLibDir)
LibDir += $(GlpkLibDir)

LibName := ${CbcLibName} ${CglLibName}
LibName += ${OsiClpLibName} ${ClpLibName}
#LibName += ${OsiDylpLibName} ${DylpLibName}
LibName += ${OsiLibName} ${CoinLibName} 
LibName += ${bzlibLibName} ${zlibLibName} $(lapackLibName) $(readlineLibName)
LibName += $(GlpkLibName)

Define := ${CbcDefine} ${CglDefine}
Define += ${OsiClpDefine} ${ClpDefine}
#Define += ${OsiDylpDefine} ${DylpDefine}
Define += ${OsiDefine} ${CoinDefine}
Define += ${bzlibDefine} ${zlibDefine} $(lapackDefine)

# Unless overridden, cbc will select clp as the default solver.
# CBC_DEFAULT_SOLVER is the hook to change the default when you're building the
# code with multiple solvers. For example, to add dylp but leave clp as the
# default, uncomment only the line to define COIN_USE_DYLP. To use both clp and
# dylp, with dylp the default, also uncomment the line which defines
# CBC_DEFAULT_SOLVER.  cbc chooses clp as the default because it's listed first
# in the conditional compilation block at the head of CbcMain.cpp::main().  If
# you build the code without clp, the first defined solver becomes the
# default.

#use clp
CXXFLAGS += $(addprefix -D,COIN_USE_CLP)

#use dylp
#CXXFLAGS += $(addprefix -D,COIN_USE_DYLP)
#CXXFLAGS += $(addprefix -D,CBC_DEFAULT_SOLVER=\"dylp\")

#tell parameter handling to allow for CbcModel and OsiSolverInterface
CXXFLAGS += -DCOIN_USE_CBC
##############################################################################
# You should not need to edit below this line.
##############################################################################

CXXFLAGS += $(OPTFLAG)
ifeq ($(OptLevel),-g)
    CXXFLAGS += -DCBC_DEBUG
endif

TESTSRC := CbcMain.cpp
#TESTSRC += CbcOrClpParam.cpp
TESTSRC += CbcParam.cpp
TESTSRC += unitTest.cpp

###############################################################################

space:= $(empty) $(empty)
OptVersion := $(subst $(space),_,$(OptLevel))

TARGETDIR := $(UNAME)$(OptVersion)
DEPDIR := dep

VPATH := . : include : Junk : ${TARGETDIR} : ${DEPDIR}

#########################################################################

CXXFLAGS += $(addprefix -I,${IncDir})
CXXFLAGS += $(addprefix -D,${Define})

LIBDIRS := ${LibDir}
LIBS    := ${LibName}

LDFLAGS := $(addprefix -L,$(LIBDIRS))
LDFLAGS += $(call ifprefix,$(SHLINKPREFIX),$(LIBDIRS))
LDFLAGS += $(patsubst lib%,-l%,$(basename $(LIBS)))

ifeq ($(findstring Linux,${UNAME}),Linux)
	CXXFLAGS +=	-DREADLINE
endif
#LDFLAGS += -lefence

###############################################################################

TESTOBJ := $(addprefix $(TARGETDIR)/, $(TESTSRC:.cpp=.o))
TESTDEP := $(addprefix $(DEPDIR)/, $(TESTSRC:.cpp=.d))

###############################################################################
# This one must be right before the rules

include ${MakefileDir}/Makefile.rules

###############################################################################

.DELETE_ON_ERROR:

.PHONY: unitTest

unitTest: $(TARGETDIR)/cbc

$(TARGETDIR)/cbc : $(TESTOBJ)
	@rm -rf Junk
	@echo ""
	@echo Creating cbc
	@mkdir -p $(TARGETDIR)
	@rm -f $@
	$(CXX) $(CXXFLAGS) -o $@ $(TESTOBJ) $(LDFLAGS) $(SYSLD) -lm
	${CP} $@ ..

###############################################################################

%::
	@mkdir -p Junk
	touch Junk/$(notdir $@)

###############################################################################

-include $(TESTDEP)
